import gulp from "gulp";
import fileInclude from "gulp-file-include";
import del from "del"; // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º default import
import browserSyncLib from "browser-sync";

const browserSync = browserSyncLib.create();
const { src, dest, watch, series, parallel } = gulp;

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const paths = {
  src: {
    html: "src/*.html",
    partials: "src/partials/*.html",
    images: "src/assets/images/**/*.{png,jpg,jpeg,svg,webp}",
    assets: "src/assets/**/*.*",
  },
  dist: {
    base: "docs/",
    images: "docs/assets/images/",
    assets: "docs/assets/",
  },
};

// === –ó–∞–¥–∞—á–∏ ===

// 1Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ docs
export function clean() {
  console.log("Cleaning docs folder...");
  return del([paths.dist.base]); // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º `del()` –≤–º–µ—Å—Ç–æ `deleteAsync`
}

// 2Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ HTML —Å fileInclude
export function html() {
  console.log("Processing HTML...");
  return src([paths.src.html, "!src/partials/**"])
    .pipe(
      fileInclude({
        prefix: "@@", // –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è include
        basepath: "@file",
      })
    )
    .on("error", (err) => console.error("HTML Error:", err))
    .pipe(dest(paths.dist.base));
}

// 3Ô∏è‚É£ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export function copyImages() {
  console.log("Copying images...");
  return src(paths.src.images).pipe(dest(paths.dist.images));
}

// 4Ô∏è‚É£ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∞—Å—Å–µ—Ç–æ–≤
export function copyAssets() {
  console.log("Copying assets...");
  return src([paths.src.assets, `!${paths.src.images}`]).pipe(
    dest(paths.dist.assets)
  );
}

// 5Ô∏è‚É£ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (browser-sync)
export function serve(done) {
  console.log("Starting server...");
  browserSync.init({
    server: { baseDir: paths.dist.base },
    port: 3000,
    open: true,
  });
  done();
}

// 6Ô∏è‚É£ –°–ª–µ–∂–∫–∞ –∑–∞ —Ñ–∞–π–ª–∞–º–∏
export function watchFiles() {
  console.log("Watching files for changes...");
  watch(paths.src.html, series(html, reloadBrowser));
  watch(paths.src.partials, series(html, reloadBrowser));
  watch(paths.src.images, series(copyImages, reloadBrowser));
  watch(paths.src.assets, series(copyAssets, reloadBrowser));
}

// üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–