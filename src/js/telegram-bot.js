// üìå –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
import { botToken, chatId } from "./config.js";
// üì© –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ Telegram
export async function sendTelegramMessage(name, phone) {
  if (!botToken || !chatId) {
    console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ CHAT_ID!");
    return;
  }

  const message = `üìù *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n\nüë§ *–ò–º—è:* ${name}\nüìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}`;
  const telegramUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;

  try {
    const response = await fetch(telegramUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: "Markdown",
      }),
    });

    if (response.ok) {
      console.log("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram!");
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", response.statusText);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", error);
  }
}
console.log("üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ import.meta.env:", import.meta.env);
console.log("üîπ TELEGRAM_BOT_TOKEN:", import.meta.env.VITE_TELEGRAM_BOT_TOKEN);
console.log("üîπ TELEGRAM_CHAT_ID:", import.meta.env.VITE_TELEGRAM_CHAT_ID);
